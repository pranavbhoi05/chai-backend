node -v
npm init
 
now initialize repo and add to git
git init
git add .
 git config --global user.email "pranavbhoir182000@gmail.com"    
>> git config --global user.name "pranav"
git commit -m "add initial files for backend"
now go to github and create new repo
after creating gitrepo follow the command which are shown

*git branch -M main  (Renames your current branch to main (GitHub's default branch))
##########################################################################################
* we have not set origin yet so now set remote : git remote add origin https://github.com/pranavbhoi05/chai-backend.git
*now git repo knows where to puch it remotely
################################################################################################
*git push -u origin main  
(Pushes your local main branch to the remote (origin).
-u sets it as the default upstream branch, so next time you can just use git push.)
##############################################################################################

create new file with name .gitignore (we will put some sensitive files here)
* go to gitignore generator in browser and search (node) and create then copy and paste in gitignore file
*create .env file
*we mostly avoid to push .env file in git so hitesh has create .env.sample file so he can share it with us
*now create new folder with name source (all directory files will store in here, depends upon you)
*now create 3 files in src folder (index.js,app.js,constants.js)
###############################################################################################
*now package.json doesnt how we gonna make things work so add(type : "module") right above main : indesx.js
NOTE : why we use module cause we gonna use import syntax (not require syntax) 
WE WILL USE MODEL in this ENTITE PROJECT SO IT WILL MAINTAIN CONSISTANCY IN PROJECT
###################################################################################################
*sometimes we wanted to keep restarting server so we gonna use nodemon
*go to nodemon site
* npm i -D nodemon
note: make changes in package.json file 
     1. make changes in script tag: ("dev": "nodemon src/index.js") nodemon will keep reloading this file whererver we make changes
* check git status then commmit changes
*git  commit -m "setup project files part-1"  
*git push
*we gonna need few folders in src so create folders
mkdir controllers db middlewares models routes utils

###################################################
*prettier must be install to
*npm i -D  prettier and also create file in main brach with name .prettierrc

make changes in that file as per requirment , i did:
{
    "singleQuote": false,
    "bracketSameLine": true,
    "tabWidth": 2,
    "semi": true,
    "trailingComma": "es5"
}

#######################################

create another file with name (.prettierignore) and make changes:
/.vscode
/node_modules
./dist

*.env
.env
.env.*

NOTE:
*The .prettierignore file tells Prettier which files or folders not to format, similar to .gitignore.
*This prevents Prettier from modifying ignored files when running formatting commands.

#############################################################################
STILL:
          WE HAVE DONE DEV DEPENDENCY IN PACKAGE.JSON BUT STILL WE HAVENT INSTALL DEPENDANCY OF  EXPREE AND MONGOOSE


now install MONGOOSE,EXPREE,dotenv

*install dotenv cause all the things we will load from environment variable 
* whenever we talk with database it always take time, in that case we are going to use async await(try,catch) or promices
*never connect databasea in singel line always use async await
now go to index,js
*use effie and async operation
*make sure the import thing
*store mongose in variable

#####################################################

2nd approch:

*create js file in db folder
*import mongoose and db name
*then add (trycatch) async and await both in seperate variabela and give console.log(`\n Mongo conneced !! DB host:${connectionInstance.connection.host}`) by adding connection .host i ll get to know which database im connecting (cause there are indivisul db's for production,testing,development)
* in catch make sure to add precess.exit(1)  to handdle error
*then export it
*export default variablename   


now import that variable index.js file and callback
but
in src index.js always import.env file in code at very first line
 *we also need to config that file :
  dotenv.config({
  path : `./env`
})

now go to package.json and edit
"dev": "nodemon -r dotenv/config src/index.js"
also
Without this flag, you'd need to:
Add require('dotenv').config() at the top of index.js
NOTE : What -r dotenv/config Does
Preloads the dotenv package
The -r flag stands for "require" and loads the specified module (dotenv/config) before your application starts.

Automatically loads .env file
The dotenv/config module (from the popular dotenv package) automatically:

Looks for a .env file in your project root

Parses its contents (key-value pairs)

Injects them into process.env

####################################################

then run numrun dev

