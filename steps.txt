node -v
npm init
 
now initialize repo and add to git
git init
git add .
 git config --global user.email "pranavbhoir182000@gmail.com"    
>> git config --global user.name "pranav"
git commit -m "add initial files for backend"
now go to github and create new repo
after creating gitrepo follow the command which are shown

*git branch -M main  (Renames your current branch to main (GitHub's default branch))
##########################################################################################
* we have not set origin yet so now set remote : git remote add origin https://github.com/pranavbhoi05/chai-backend.git
*now git repo knows where to puch it remotely
################################################################################################
*git push -u origin main  
(Pushes your local main branch to the remote (origin).
-u sets it as the default upstream branch, so next time you can just use git push.)
##############################################################################################

create new file with name .gitignore (we will put some sensitive files here)
* go to gitignore generator in browser and search (node) and create then copy and paste in gitignore file
*create .env file
*we mostly avoid to push .env file in git so hitesh has create .env.sample file so he can share it with us
*now create new folder with name source (all directory files will store in here, depends upon you)
*now create 3 files in src folder (index.js,app.js,constants.js)
###############################################################################################
*now package.json doesnt how we gonna make things work so add(type : "module") right above main : indesx.js
NOTE : why we use module cause we gonna use import syntax (not require syntax) 
WE WILL USE MODEL in this ENTITE PROJECT SO IT WILL MAINTAIN CONSISTANCY IN PROJECT
###################################################################################################
*sometimes we wanted to keep restarting server so we gonna use nodemon
*go to nodemon site
* npm i -D nodemon
note: make changes in package.json file 
     1. make changes in script tag: ("dev": "nodemon src/index.js") nodemon will keep reloading this file whererver we make changes
* check git status then commmit changes
*git  commit -m "setup project files part-1"  
*git push
*we gonna need few folders in src so create folders
mkdir controllers db middlewares models routes utils

###################################################
*prettier must be install to
*npm i -D  prettier and also create file in main brach with name .prettierrc

make changes in that file as per requirment , i did:
{
    "singleQuote": false,
    "bracketSameLine": true,
    "tabWidth": 2,
    "semi": true,
    "trailingComma": "es5"
}

#######################################

create another file with name (.prettierignore) and make changes:
/.vscode
/node_modules
./dist

*.env
.env
.env.*

NOTE:
*The .prettierignore file tells Prettier which files or folders not to format, similar to .gitignore.
*This prevents Prettier from modifying ignored files when running formatting commands.

#############################################################################
STILL:
          WE HAVE DONE DEV DEPENDENCY IN PACKAGE.JSON BUT STILL WE HAVENT INSTALL DEPENDANCY OF  EXPREE AND MONGOOSE


now install MONGOOSE,EXPREE,dotenv

*install dotenv cause all the things we will load from environment variable 
* whenever we talk with database it always take time, in that case we are going to use async await(try,catch) or promices
*never connect databasea in singel line always use async await
now go to index,js
*use effie and async operation
*make sure the import thing
*store mongose in variable

#####################################################

2nd approch:

*create js file in db folder
*import mongoose and db name
*then add (trycatch) async and await both in seperate variabela and give console.log(`\n Mongo conneced !! DB host:${connectionInstance.connection.host}`) by adding connection .host i ll get to know which database im connecting (cause there are indivisul db's for production,testing,development)
* in catch make sure to add precess.exit(1)  to handdle error
#NOTE : process.exit(1) = *"This error is so bad, we need to stop everything now." ðŸ”´
                   *Use it only when continuing would cause worse problems than shutting down. 
*then export it
*export default variablename   


now import that variable index.js file and callback
but
in src index.js always import.env file in code at very first line
 *we also need to config that file :
  dotenv.config({
  path : `./env`
})

now go to package.json and edit
"dev": "nodemon -r dotenv/config src/index.js"
also
Without this flag, you'd need to:
Add require('dotenv').config() at the top of index.js
NOTE : What -r dotenv/config Does
Preloads the dotenv package
The -r flag stands for "require" and loads the specified module (dotenv/config) before your application starts.

Automatically loads .env file
The dotenv/config module (from the popular dotenv package) automatically:

*Looks for a .env file in your project root
*Parses its contents (key-value pairs)
*Injects them into process.env

####################################################

then run numrun dev

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3/4/2025 vid no 9 = api responce and error handling

*previously our db was succesfuly connected but our app was'nt connected
*our new task is to start listen from app

*go to app.js and import express
*as we have (connected db ) in (db folders index.js) we have to return promises in main index file too, why ? (cause we have written async method in db folder and whenever we write asyck method, then techniquly we have to return promises (main)in index.js file too)

*now at .then() and .catch() method and add listen method 
*also add app.on You can listen for errors (though Express has its own error-handling middleware).

#####################################################################
*go to express documentaion for more info
*req.params : whenever we receive data from URL mostly come from (req.params)
*req.body : data comes in forms and json format in (req.body)
*sometimes we will take data cookie 
#######################################################################

*go to browser then search for npmjs and search for cookie-parser and corest to see documentaion 

now install cookie-parser and cors:

*npm i cookie-parser cors
NOTE : you can check in package.json is they are install
*now  import this files in app.js
*now configure this files in here:
app.use(cors())
NOTE : this (use) method use in middleware and configuration
we can also do setting like : we can define origin (urls)

*make changes in that cors method : 
*1.add origin in {} and give path to link (add from env file) but first need to create that variable in process.env.CORS_ORIGIN file
NOTE :  whenever we SEE (*) in origin it is known for allow all request 
#NOTE:  CORS CAONTAINS OBJECT

*now (,) and ctrl + shift (to see more option)
* credentials : true

###################################################

NOTE : more settings to do before we jump to cookies cause data is gonna come from many places like :
1. url,
2.json format,
3.few will send in body (form),
4.few will send form in json

SOMTIMES WE NEED TO ADD SOME LIMITS IN IT CAUSE WE DONT WANT CRASH OUR SERVER CAUSE OF (UNLIMITED JSON FILE AND ETC)
*now again add app.use(express.json()) in app.js
[this line mean we are accepting json format in express]
*again ctrl + shift (to see more options)
*set LIMITS (i did 20 kbs)

*somtimes data comes in the form of url in the format of (e.g %20)
to make that urls understandable we add (express.urlencoded) in app.js
*can also add extended (its like can give nested object) its not nessesry to give and we can also add limit

*somtimes we wanted to store files,pdf or images , then we create public folder which amyone can anyone access
app.use(express.static("public"))

NOTE : this 3 majer components are imp in app
express.urlencoded
express.json
express.static
*also add cookieParser() in app
cookie-parse = to access and set cookies in user's browser, by using this (only server can read and perform operation on it)

########################################################################################
4/4/2025 vid no 9 (api responce and error)

#read notes about middlewares cause we gonna use it now
#Middleware can block requests like an (if condition), but itâ€™s more powerful. (e.g instagram url login)
#we can add multiple midleware for checking
#note : (err,req,res,next) after fulfilling the condition (next) flag will move to another condition to cheak

#######################################################
#utils

#just cause it takes time in dbconnect so its esetial to use async await
#and try catch is also required to apply 
#we got 2 option either we can use (trycatch) or (.then.catch)

 

* we have set higher order function in variable (asyncHandler)
*const asyncHandler = (fn) => async (req, res, next) => {
*now apply trycatch
*in catch use res.status method 
error.code and you also send 500
*can also send add .json responce
*we add success flag in .json (so the frontend person will get easy)
*also add message in .json flag
* (try) part : 
await fn(req, res, next)

###################################################
2nd approch using .then and .catch

*const asyncHandler = (requestHandler) => {
    return (req, res, next) => {
        Promise.resolve(requestHandler(req,res,next)).
        catch((err) => next (err))
    }    
 }
 *export { asyncHandler}

 ###################################################

 5/4/2025 (creating structure of errors)

#we have to makes errors in centralizze from (so we will not have to revise this all the time   )
#we wanted to statderdize error of api and responce of api
#so we gonna have to write code,it willbe benefitial. (benefits): all the responce and error will come in standerdize form
#browse site : nodejs api error
#as we do know js, we have knowladge of classes and inheritance (so we can overwrite the error methods) 

*create file (apierror.js) in utils
*create class named(apierror) and extend with Error
#read documentaion in error.txt (i have mention (error.txt) name file in this folder)

##########################################################
5/4/2025 (apiresponce.js)  same video

CODE: class ApiResponse {
    constructor(statusCode ,data, message = "success"){
        this.statusCode = statusCode
        this.data = data
        this.message = message
        this.success = statusCode < 400
    }
}

*create new apiresponce.js file in utils
*we send statusCode in this.success 
*we always have to provide server status code in sucess 
*just because we are sending responce so we will take statuscode below (400)
*but in error you can send more than (400) 

NOTE: SEE DOCUMENTATION OF STATUSCODE

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

6/4/2025  2:32AM  (video no 9 user and video model wuth hooks and jwt)

# FEW SETTING ARE YET TO SET  : whenever error appears it must go through apierror.js

#waste day (just watch video and did not implement)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

7/4/2025  12:47am (video no 9 user and video model wuth hooks and jwt)

NOTE: in this topic we will see: 
1.how to write aggrigation pipeline 
2.jwt 
3.bcrypt
4.how models are created in mongoose 

###########################################

*create file (user.model.js) and (video.model.js) in models folder
*go to readme file where i saved eraser file
*now create schema for user model and video model
#after writing models on user and video(we have to work on watch history , it makes our project complex and next level)
#for that we goona use package ,(mongoose-aggregate-paginate-v3) from npm (READ AGGREGATION PIPLINE) aggrigation means collection.
#true power of mongo db comes from aggregate queries 

*install : npm install mongoose-aggregate-paginate-v2
*inject in video.model.js (import mongooseAggregatePaginate from 
"mongoose-aggregate-paginate-v2";)
#NOTE : before export you gonna have to use it,ALSO read plugin,middleware in npm,you can create your own plugin too

#bcrypt : (A library to help you hash passwords.)
#jwt (json web token): 1. to create token , 
                       2. for cryptography (to handle encryption,decryption)
*npm i bcrypt 
*npm i jsonwebtoken
*import jwt and bcrypt in "user"
#direct encryption isnt possible SO we'll take help of(hooks),go to documentaion of mongoose and click on middleware, you'll see hooks
#pre (hook) : whenever user make changes in data (controller), just before saving it we can run operation like(pass encryption)

#which event u want use in pre
1. validate
2.save
3.updateOne
4.deleteOne

*go to user
*userSchema.pre("save", async function(next){
    if(!this.isModified("password")) return next()
    this.password = bcrypt.hash(this.password,10)
next()
} )
#now our pass is encrypted and saved
#CHECK OUT USER.MODEL.TXT FILE (FOR UNDERSTANDING)

################################################
*NOW WE'LL CREATE METHOD (WHY) : to verify the password is valid or not , 
# WE CAN Also DESIGN COSTOM METHOD
*go to user.model.txt for NEXT CODE 

#################################################
JWT (json web token) : (its like key )anyone who got this token, i will share my data
#go to site jwt.io site (for more info)
#What is a JWT Bearer Token?
1.A compact, URL-safe token following the RFC 7519 standard
2.Contains JSON payload with user claims (e.g., user ID, roles)
3.Used as a Bearer token in the Authorization header

*now we will generate access token
*go to env file
*To generate ACCESS_TOKEN_SECRET Go to site : sha 256
*ACCESS_TOKEN_SECRET
*ACCESS_TOKEN_EXPIRY
*REFRESH_TOKEN_SECRET
*REFRESH_TOKEN_EXPIRY
#we are using session and cookies at same time
#access token isnt going to store in db, while refresh token will be saved in db

#########################################################################
# access token generate method: 
                                to generate access token its same process as we create our own method (above)
 
* in user.model file : (read jwt sign syntax):
*jwt.sign({
  data: 'foobar'
}, (path of ACCESS_TOKEN_SECRET), (path for expiry token) in {expririn : }
*use this syntax to create model for creating(access token and refresh token) 
)

NOTE : OUR SCHEMA STRUCTURE HAS BEEN created

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#9/4/2025 10:4 pm (video no 10 : How to upload file in backend | Multer)
# NEXT TARGET : HOW TO ADD DATA IN DB (WHICH WE HAVE CREATED )
#we dont do file handling in our own server,either they use their specialize 3rd party services or aws 
#we gonna use clodinary(will file upload on its server) and multer(will upload file through multer)

(what we gonna do):
                1.we'll take file from user, and will keep that file on our own server for temporary
                2.next we'll take that file from local storage (our server) and upload on cloudinary 
		3.next by using fs we'll write code to unlink(delete) the file which is we kept on our own server

*npm i cloudinary
*npm i multer
*created file name cloudinary.js in utils
*now import clodinary in that file
*also import fs 
*copy entire code from clodinary side and paste in file 
*all configuration are given by clodinary ,we jsut need to make few changes
*we gonna have add few things in .env file which are: CLOUDINARY_CLOUD_NAME =,CLOUDINARY_API_KEY = ,CLOUDINARY_API_SECRET = 
#NOTE : we can make changes in our cloudinary api keys,name and secret

#Upload the image to Cloudinary 
*we'll create method and give path of local file , once file successfuly upload ,we will unlink that file 
*files are complex are same as db, so we'll apply trycatch in here 
*we'll add condition if local path is present ot not (if not present we;ll return null)
*next step upload the file on cloudinary , we can also add resource_type(e.g png,img,video)
*just because its async task we'll add await and hold in variable , also print the responce (console.log('File uploaded to Cloudinary:', response.url);)
*make sure to return responce to user

#if file is not successfuly upload , so we still have option of catch
#upload is not successfull then for safty perpose we need to unlink(delete)the file,else currupted file satys in server
*now write fs method in catch(), will use unlinkSync (sync) insted async cause we want to perform that process immidiatly
 *return null and export cloudinary 

#############################################################3
creating middleware unsing multer:
*go to multer documentaion and copy the syntax 
*just cause in that syntax (req, file, cb) file is coming ,thats why we using multer
#cb (callback)
*i'll make all changes in public file,so made changes in it :  cb(null, './public/temp')

*filename : if u want to change filename like unique file name
#file.originalname â†’ The original name of the uploaded file (e.g., image.jpg).


#cb(null, file.originalname):
# 1. Keeps the original filename (no modification).
# 2. Risk: If two files with the same name are uploaded, the second will overwrite the first.


#Use Case of Date.now() in Multer Filenames
When handling file uploads, Date.now() is commonly used to generate a unique filename and avoid conflicts. Hereâ€™s why and how it works:

* export const upload = multer({ storage: storage })

#now just cause i have multer, when i write routes and controlers, when im expecting files will come from that route,then i'll go to that route,and write storage method and call it 
#NOW WE CAN HANDLE ANYKIND OF FILE handling ,like vids,img,pdf etc 

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#15/4/2025 (video no 11 : http crash course)
#read notes that o have created 

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#15/4/2025 04:47 pm (video no 12 : router and controller with debugging)

#CONTROLLER : Handle HTTP requests/responses (validate inputs, process data, return results).

*create new file in controller (user.controller.js)
#we have created helper file before ,incase if we face problem ,we've created wraper file(asyncHandler)
#the only benefit is we won't need to put each things into (promises)trycatch everytime
*so import  asyncHandler file in user.controller.js file
*now we will create method and that methos's only task is to register a user
*as previously we created asyncHandler which is higher order function which accept function, we'll write aync method in that function (req,res)
*now give responce in status(e.g 200) and also give json responce as u like
*now export registeruser

########################################################################
NEXT STEP : CREATE ROUTES
(as we have created the method,but atleast that method suppose to run on url, so that we create route)

*create fiel user.route.js in rouder folder and in that file
*import {router} from 'express';
const router = router();
export default router;

#we can also import this methods in index.js but it must be clean
*so we will import this all things in app.js (cause production grade standerd)

#we always write routes after cookieparser in app.js
*import userRoutes from "./routes/user.routes.js"
#NOTE userroutes is just variable give name as u like (e.g import myCustomUserRoutes from './routes/user.routes.js';)

#priviosly we use to write route and controller at same time through (app.js)
#but just cause we made all the things separate,we have write router separatly, so to bring router we need to bring middleware here 
#so insted of app.get we'll use app.use

*after importing routes to declare routes: 
app.use("/api/users", userRoutes)
# understanding the statment : always write /api for staderd terms,
# users is like variable give any name u like,
#userRoutes for which router u want to activate (which we already created)


#as we have write this middleware,now anyone who type /user , then this mean u r giving control to userrouter
then userrouter will take u to user.routes.js (which is location) and it will ask, on which route u want send user
#then we will write route method in user.routes.js  

*router.route("/register).post(registeruser)
#explanation : we have newly created (/register) method here , and we've added post method, in this post method we've added method which has to be run , so we give  (registeruser), which we previously created in user.controller.js
once user hit (http://localhost:8000/api/users/register) , it will take him registeruser
*also import registeruser in route file

#if we wanted to create login method, we won't need write import statement
*if u wanted to create login method simply go to routes and create methos as we created register method
#we will not make any changes in app.js
#all the methods we gonna write after user will be written in user.routes.js
#"/api/v1/users" = v1 for currenet version (standard practise)

*makke sure to return asyncHandler in asyncHandler file 
*npm run dev
*if success server start then , go to postman site and paste your http url on + symbol url option
*make sure to choose post option in it 

#as we have got result from postman : status 200 and json response "ok, cause we have asked to give this two inties in controllers

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#17/4/2025 12:20 pm (vid no 13 LOGIC BUILDING | REDISTER CONTROLLER)

(in this topic we gonna properly regiser user,we will take data from user
 through postman e.g name,email,photo etc , we will take this data to 
 server and we'll add this to database, if face issue we'll also debuge)


(algoritham) : steps to solve this probs 

#just cause we dont have frontend ,we gonna take data through postman(get req,post req), and it also depends upon how we create models(username,fullname,email,password,)
#validation : incase if user send empty username or email , email is in correct format or not and all the posible validation
#check if user already exists : if his accout already exist (check yhrough username or email)
#check for image , cheak for avatar : check our file exists or not
#upload them to cloudinary after we'll check avatar is uploaded or not
#create user object  :(why) cause when i send data in mongodb, and its no sequel db we mostly create object and upload it,so right after creating object we'll do creation which is - (create entry in db)
#remove password and refresh token feild from response : we dont wanna share pass and refresh token to user
#check for user creation success or failure
#return response to frontend if successed 
 
#############################################################################

#its not nessesry if data come from body , it can come from url

#step  1 : 
       *in user.controller exreact data using destruturing of object which we want (fullname,email,username,password)
       *for testing  console log (email),go to postman,past url,select body cause we r taking data from body,then select raw and then json
       *enter data for testing in object format

#file handling : we cant handle file here, but we can handle data only 
                #as we have created multer(middleware) for file handling, look for exported filename
                * go to routes and import upload file
                #as we know middleware means (jate samay muzse milke jana),so we'll add middelware before execution, so 
                *add upload just before execution (post(upload.feild[]),registerUser), just by usning dot we get to see various methos
                #we choose feild cause it accepts array and we can now store many feild in that array as mush as we want,but in objects format
                #to userstand more i have created txt file named avatar
                #we took two feild avatar and cover image, can also take many 

#step 2: check validation   
    *we'll add id condition if value exist or not , we've create api error file so we'll also use that file to send status code and passing messages    
    *make sure to import apierror file
    #to check multiple errors at once we'll pass array and will use .some method (speciality : returns result in true or false) , we can also use .map
    #insted of checking single condition we did add arry so we can check multiple feilds, so we can apply some or map method
    #i have created txt file name (optional chaning) to understand ? and trim() 

#step 3: user exist or not 
    *import user from model (this user can directly contact with db, cause its made by mongoose)
    #now this user will call on behalf of us
    *we use findone method(if user is successfuly find , then returns)
    *we'll ask to db to find the user which contains (e.g email or username) , if provided data matches,then throw error
    #we'll use operator $or (to check if either username or email is already exist ot not)

#step 4:  check images and avatar is uploaded
        #till now, we get all data in  req.body,but just cause we have created middleware in routs, so middelware also gives access few things, what middleware do(add more feilds in req)
        #as express has give (.body) by default, multer gives us (.files) access
        #why we use req : req Contains the Uploaded Files
        When you upload files using middleware like Multer or express-fileupload, the files are attached to the req (request) object under req.files.
        #Without req, we wouldn't have access to the uploaded files.
        #i have created file of chaining.txt (read it)
        #incase if we have access of that files or not so  used optional chaining,then i add avatar, cause i want avatar(go to routes file where i declare)
        #with avatar we get multiple options like png , jpg, size
        #NOTE : 1.If the form field is named avatar (without array notation), req.files.avatar will be a single file object (not an array), so you can access its path directly
                2. If the form field is named avatar[] (with square brackets, allowing multiple files),
        # in this code req.files?.avatar[0]?.path : we took [0] cause we want its first property, we took optionally
        # for path as have declear path in multer file 
        *store in variable (avatarLocalPath), why local path ? , cause file is in our server, but not on cloudinary 
        *same process goes to coverimage
        *atleast avatar image is required , so add if condition , check if image exist ot not

#step 5: upload them to cloudinary
        #as per our avdanced preparation,we knew, we'll upload on cloudinary or (aws), so we've already write the code of cloudinary
        *import UploadonCloudinary in user controller
        #if u observe , u have write the code for failure(will delete file), but in success,we have'nt write the code for delete the code 
        *to upload file : UploadonCloudinary(avatarLocalPath) , this process take time so add await and store in variable
        *again add if condition , to check avatar exist, incase if file not exist, code will crash

#step 6: create user object and
#step 7: remove password and refresh token feild from response

       #to make entry in db we had priviosly created user which talks with database
       *user.create({}) : this method take objecrt
       *we take fullname and avatar's url , why only url? (cause we dont wanna send entire object,we'll send only url to db)
       *will also add coverimage : coverimage.url , but the prob is we'havent add consition to check if coverimage exist or not so we add ?. optional chaining
       #and just cause its not exist, in that case add || (or) in "" empty string, cause its not compulsary   
       *take email,password and username : username.tolowercase() 
       *hold in variable and await , cause takes time while talking with server in server in diffrent continetal
       #make suer to await in usermodel, in bcrypt , cause password hashing takes time           
       #to check if user is created or not we got better approch : .findbyId(where we can pass id )
       #when user is successfuly create, it doesnt just create data(e.g username,email,avatar) but also mongodb add _id feild with each new entry
       #why use .findbyid() : 
       #Fetch data from database: 1. it's a quick and direct way to get a document by its _id.
                                 2. Example: You received only a user ID (e.g., from a token or request) and need full user info from MongoDB.
      #if user is found then user was created , if not then we''ll throw error
      #hold in variable and await
      *just by using findbyId method, if we find user then we can optionally chain by using select method, this method will help you to remove refresh token and password
      *select("-password -refreshToken")

#step 8 : check for user creation success or failure      
      
      *also throw error for failure , 500 cause its ours falut

#step 9 : return response to frontend if successed
        
        *make sure to export apiresponce in apiresponce file
        *import apiresponce in controller file
        *return res.status(201).json() : will send current status code and json responce, we'll send it in object format
        * in json () create new object of apiresponce 
        * in that newly created object add statusCode, createduser(which is data), and message of successfuly created

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

   REMAINDER :  5 MAY 2025    2.11AM
I MADE A MISTACK WHICH TOOK ME 1 WEEK TO RESOLVE 

*review why we use
 1. import path from path and 
 2. const normalizedPath = path.resolve(localFilePath);

check file (big problem) for solution

 #######################################################################