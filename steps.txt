node -v
npm init
 
now initialize repo and add to git
git init
git add .
 git config --global user.email "pranavbhoir182000@gmail.com"    
>> git config --global user.name "pranav"
git commit -m "add initial files for backend"
now go to github and create new repo
after creating gitrepo follow the command which are shown

*git branch -M main  (Renames your current branch to main (GitHub's default branch))
##########################################################################################
* we have not set origin yet so now set remote : git remote add origin https://github.com/pranavbhoi05/chai-backend.git
*now git repo knows where to puch it remotely
################################################################################################
*git push -u origin main  
(Pushes your local main branch to the remote (origin).
-u sets it as the default upstream branch, so next time you can just use git push.)
##############################################################################################

create new file with name .gitignore (we will put some sensitive files here)
* go to gitignore generator in browser and search (node) and create then copy and paste in gitignore file
*create .env file
*we mostly avoid to push .env file in git so hitesh has create .env.sample file so he can share it with us
*now create new folder with name source (all directory files will store in here, depends upon you)
*now create 3 files in src folder (index.js,app.js,constants.js)
###############################################################################################
*now package.json doesnt how we gonna make things work so add(type : "module") right above main : indesx.js
NOTE : why we use module cause we gonna use import syntax (not require syntax) 
WE WILL USE MODEL in this ENTITE PROJECT SO IT WILL MAINTAIN CONSISTANCY IN PROJECT
###################################################################################################
*sometimes we wanted to keep restarting server so we gonna use nodemon
*go to nodemon site
* npm i -D nodemon
note: make changes in package.json file 
     1. make changes in script tag: ("dev": "nodemon src/index.js") nodemon will keep reloading this file whererver we make changes
* check git status then commmit changes
*git  commit -m "setup project files part-1"  
*git push
*we gonna need few folders in src so create folders
mkdir controllers db middlewares models routes utils

###################################################
*prettier must be install to
*npm i -D  prettier and also create file in main brach with name .prettierrc

make changes in that file as per requirment , i did:
{
    "singleQuote": false,
    "bracketSameLine": true,
    "tabWidth": 2,
    "semi": true,
    "trailingComma": "es5"
}

#######################################

create another file with name (.prettierignore) and make changes:
/.vscode
/node_modules
./dist

*.env
.env
.env.*

NOTE:
*The .prettierignore file tells Prettier which files or folders not to format, similar to .gitignore.
*This prevents Prettier from modifying ignored files when running formatting commands.

#############################################################################
STILL:
          WE HAVE DONE DEV DEPENDENCY IN PACKAGE.JSON BUT STILL WE HAVENT INSTALL DEPENDANCY OF  EXPREE AND MONGOOSE


now install MONGOOSE,EXPREE,dotenv

*install dotenv cause all the things we will load from environment variable 
* whenever we talk with database it always take time, in that case we are going to use async await(try,catch) or promices
*never connect databasea in singel line always use async await
now go to index,js
*use effie and async operation
*make sure the import thing
*store mongose in variable

#####################################################

2nd approch:

*create js file in db folder
*import mongoose and db name
*then add (trycatch) async and await both in seperate variabela and give console.log(`\n Mongo conneced !! DB host:${connectionInstance.connection.host}`) by adding connection .host i ll get to know which database im connecting (cause there are indivisul db's for production,testing,development)
* in catch make sure to add precess.exit(1)  to handdle error
#NOTE : process.exit(1) = *"This error is so bad, we need to stop everything now." ðŸ”´
                   *Use it only when continuing would cause worse problems than shutting down. 
*then export it
*export default variablename   


now import that variable index.js file and callback
but
in src index.js always import.env file in code at very first line
 *we also need to config that file :
  dotenv.config({
  path : `./env`
})

now go to package.json and edit
"dev": "nodemon -r dotenv/config src/index.js"
also
Without this flag, you'd need to:
Add require('dotenv').config() at the top of index.js
NOTE : What -r dotenv/config Does
Preloads the dotenv package
The -r flag stands for "require" and loads the specified module (dotenv/config) before your application starts.

Automatically loads .env file
The dotenv/config module (from the popular dotenv package) automatically:

Looks for a .env file in your project root

Parses its contents (key-value pairs)

Injects them into process.env

####################################################

then run numrun dev

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3/4/2025 vid no 9 = api responce and error handling

*previously our db was succesfuly connected but our app was'nt connected
*our new task is to start listen from app

*go to app.js and import express
*as we have (connected db ) in (db folders index.js) we have to return promises in main index file too, why ? (cause we have written async method in db folder and whenever we write asyck method, then techniquly we have to return promises (main)in index.js file too)

*now at .then() and .catch() method and add listen method 
*also add app.on You can listen for errors (though Express has its own error-handling middleware).

#####################################################################
*go to express documentaion for more info
*req.params : whenever we receive data from URL mostly come from (req.params)
*req.body : data comes in forms and json format in (req.body)
*sometimes we will take data cookie 
#######################################################################

*go to browser then search for npmjs and search for cookie-parser and corest to see documentaion 

now install cookie-parser and cors:

*npm i cookie-parser cors
NOTE : you can check in package.json is they are install
*now  import this files in app.js
*now configure this files in here:
app.use(cors())
NOTE : this (use) method use in middleware and configuration
we can also do setting like : we can define origin (urls)

*make changes in that cors method : 
*1.add origin in {} and give path to link (add from env file) but first need to create that variable in process.env.CORS_ORIGIN file
NOTE :  whenever we SEE (*) in origin it is known for allow all request 
#NOTE:  CORS CAONTAINS OBJECT

*now (,) and ctrl + shift (to see more option)
* credentials : true

###################################################

NOTE : more settings to do before we jump to cookies cause data is gonna come from many places like :
1. url,
2.json format,
3.few will send in body (form),
4.few will send form in json

SOMTIMES WE NEED TO ADD SOME LIMITS IN IT CAUSE WE DONT WANT CRASH OUR SERVER CAUSE OF (UNLIMITED JSON FILE AND ETC)
*now again add app.use(express.json()) in app.js
[this line mean we are accepting json format in express]
*again ctrl + shift (to see more options)
*set LIMITS (i did 20 kbs)

*somtimes data comes in the form of url in the format of (e.g %20)
to make that urls understandable we add (express.urlencoded) in app.js
*can also add extended (its like can give nested object) its not nessesry to give and we can also add limit

*somtimes we wanted to store files,pdf or images , then we create public folder which amyone can anyone access
app.use(express.static("public"))

NOTE : this 3 majer components are imp in app
express.urlencoded
express.json
express.static
*also add cookieParser() in app
cookie-parse = to access and set cookies in user's browser, by using this (only server can read and perform operation on it)

########################################################################################
4/4/2025 vid no 9 (api responce and error)

#read notes about middlewares cause we gonna use it now
#Middleware can block requests like an (if condition), but itâ€™s more powerful. (e.g instagram url login)
#we can add multiple midleware for checking
#note : (err,req,res,next) after fulfilling the condition (next) flag will move to another condition to cheak

#######################################################
#utils

#just cause it takes time in dbconnect so its esetial to use async await
#and try catch is also required to apply 
#we got 2 option either we can use (trycatch) or (.then.catch)

 

* we have set higher order function in variable (asyncHandler)
*const asyncHandler = (fn) => async (req, res, next) => {
*now apply trycatch
*in catch use res.status method 
error.code and you also send 500
*can also send add .json responce
*we add success flag in .json (so the frontend person will get easy)
*also add message in .json flag
* (try) part : 
await fn(req, res, next)

###################################################
2nd approch using .then and .catch

*const asyncHandler = (requestHandler) => {
    return (req, res, next) => {
        Promise.resolve(requestHandler(req,res,next)).
        catch((err) => next (err))
    }    
 }
 *export { asyncHandler}

 ###################################################

 5/4/2025 (creating structure of errors)

#we have to makes errors in centralizze from (so we will not have to revise this all the time   )
#we wanted to statderdize error of api and responce of api
#so we gonna have to write code,it willbe benefitial. (benefits): all the responce and error will come in standerdize form
#browse site : nodejs api error
#as we do know js, we have knowladge of classes and inheritance (so we can overwrite the error methods) 

*create file (apierror.js) in utils
*create class named(apierror) and extend with Error
#read documentaion in error.txt (i have mention (error.txt) name file in this folder)

##########################################################
5/4/2025 (apiresponce.js)  same video

CODE: class ApiResponse {
    constructor(statusCode ,data, message = "success"){
        this.statusCode = statusCode
        this.data = data
        this.message = message
        this.success = statusCode < 400
    }
}

*create new apiresponce.js file in utils
*we send statusCode in this.success 
*we always have to provide server status code in sucess 
*just because we are sending responce so we will take statuscode below (400)
*but in error you can send more than (400) 

NOTE: SEE DOCUMENTATION OF STATUSCODE

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

6/4/2025  2:32AM  (video no 9 user and video model wuth hooks and jwt)

# FEW SETTING ARE YET TO SET  : whenever error appears it must go through apierror.js

#waste day (just watch video and did not implement)

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

7/4/2025  12:47am (video no 9 user and video model wuth hooks and jwt)

NOTE: in this topic we will see: 
1.how to write aggrigation pipeline 
2.jwt 
3.bcrypt
4.how models are created in mongoose 

###########################################

*create file (user.model.js) and (video.model.js) in models folder
*go to readme file where i saved eraser file
*now create schema for user model and video model
#after writing models on user and video(we have to work on watch history , it makes our project complex and next level)
#for that we goona use package ,(mongoose-aggregate-paginate-v3) from npm (READ AGGREGATION PIPLINE) aggrigation means collection.
#true power of mongo db comes from aggregate queries 

*install : npm install mongoose-aggregate-paginate-v2
*inject in video.model.js (import mongooseAggregatePaginate from 
"mongoose-aggregate-paginate-v2";)
#NOTE : before export you gonna have to use it,ALSO read plugin,middleware in npm,you can create your own plugin too

#bcrypt : (A library to help you hash passwords.)
#jwt (json web token): 1. to create token , 
                       2. for cryptography (to handle encryption,decryption)
*npm i bcrypt 
*npm i jsonwebtoken
*import jwt and bcrypt in "user"
#direct encryption isnt possible SO we'll take help of(hooks),go to documentaion of mongoose and click on middleware, you'll see hooks
#pre (hook) : whenever user make changes in data (controller), just before saving it we can run operation like(pass encryption)

#which event u want use in pre
1. validate
2.save
3.updateOne
4.deleteOne

*go to user
*userSchema.pre("save", async function(next){
    if(!this.isModified("password")) return next()
    this.password = bcrypt.hash(this.password,10)
next()
} )
#now our pass is encrypted and saved
#CHECK OUT USER.MODEL.TXT FILE (FOR UNDERSTANDING)

################################################
*NOW WE'LL CREATE METHOD (WHY) : to verify the password is valid or not , 
# WE CAN Also DESIGN COSTOM METHOD
*go to user.model.txt for NEXT CODE 

#################################################
JWT (json web token) : (its like key )anyone who got this token, i will share my data
#go to site jwt.io site (for more info)
#What is a JWT Bearer Token?
1.A compact, URL-safe token following the RFC 7519 standard
2.Contains JSON payload with user claims (e.g., user ID, roles)
3.Used as a Bearer token in the Authorization header

*now we will generate access token
*go to env file
*To generate ACCESS_TOKEN_SECRET Go to site : sha 256
*ACCESS_TOKEN_SECRET
*ACCESS_TOKEN_EXPIRY
*REFRESH_TOKEN_SECRET
*REFRESH_TOKEN_EXPIRY
#we are using session and cookies at same time
#access token isnt going to store in db, while refresh token will be saved in db

#########################################################################
# access token generate method: 
                                to generate access token its same process as we create our own method (above)
 
* in user.model file : (read jwt sign syntax):
*jwt.sign({
  data: 'foobar'
}, (path of ACCESS_TOKEN_SECRET), (path for expiry token) in {expririn : }
*use this syntax to create model for creating(access token and refresh token) 
)

NOTE : OUR SCHEMA STRUCTURE HAS BEEN created

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#9/4/2025 10:4 pm (video no 10 : How to upload file in backend | Multer)
# NEXT TARGET : HOW TO ADD DATA IN DB (WHICH WE HAVE CREATED )
#we dont do file handling in our own server
#either they use their specialize 3rd party services or aws 












