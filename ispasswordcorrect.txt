explanation of this code :
userSchema.methods.isPasswordCorrect = async function (password) {
  return await bcrypt.compare(password, this.password);
};

###################################################################################

#1. userSchema.methods.isPasswordCorrect = ...
You're adding a custom method to all documents (records) of the User model.
This method will be available on individual user objects like:

const user = await User.findById(id);
user.isPasswordCorrect('enteredPassword');

#2. async function (password) { ... }
This is an asynchronous function that takes password as a parameter.
It's the plain text password that the user enters when trying to log in.

#3. bcrypt.compare(password, this.password)
This uses bcrypt.compare() to:
Hash the entered password behind the scenes
Compare it with the already hashed password (this.password) stored in MongoDB
this.password refers to the password of the current user document.
It returns true if the passwords match, otherwise false.

#4. return await ...
This returns the result of the comparison (either true or false).
Using await means it waits for bcrypt.compare() to finish before returning.

