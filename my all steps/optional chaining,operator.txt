What is ?.?
It's like a guard that protects you from errors when trying to access properties or methods of something that might be null or undefined.

Without ?. (Danger Zone 🚨)
If you try to access a property or method of null or undefined, JavaScript crashes.

############################################################################

Real-Life Analogy 🍵
Imagine you're checking if a cup has tea in it:

Without ?.: You grab the cup and immediately try to drink. If the cup is empty (null), you get a weird look (error).

With ?.: You first check if the cup exists before drinking. If it doesn’t, you just say "No tea" (undefined) instead of causing a scene.

#######################################################################

Key Takeaways
?. prevents crashes when dealing with null or undefined.

It does NOT check true/false (that’s the ternary ? : operator).

It makes your code safer when accessing properties/methods

##############################################################

3. Why Combine ?. with trim()?
field?.trim() safely handles cases where field is null or undefined (prevents crashes).

trim() ensures whitespace-only inputs are rejected.

##################################################################

. When Should You Use trim() in Forms?
✔ Usernames (shouldn’t allow spaces)
✔ Passwords (accidental spaces break logins)
✔ Emails (" user@example.com " should normalize to "user@example.com")
✔ Any text input where whitespace is meaningless

######################################################################

. Key Takeaways
trim() ensures whitespace-only inputs are treated as empty.

?. prevents crashes if the field is null/undefined.

Always use trim() in form validation unless you explicitly allow whitespace.
