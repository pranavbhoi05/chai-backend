 Operations you can do with $addFields:
🔢 Type	                        ✅ Examples
🧮 Math operations	            $sum, $subtract, $multiply, $divide, $mod
📊 Array operations	            $size, $concatArrays, $filter, $map
🔤 String operations	        $concat, $toUpper, $toLower, $substr, $trim
🧠 Logical operations	        $and, $or, $not, $cond, $ifNull
📏 Comparison operators	        $eq, $gt, $gte, $lt, $lte, $ne
🧰 Type conversion	            $toInt, $toString, $toDouble, $toDate
📆 Date operations	            $year, $month, $dayOfWeek, $dateSubtract
📦 Nested field creation	Add objects or embed sub-documents

✅ What does $addFields actually do?
$addFields adds new fields or updates existing fields to the document during an aggregation pipeline.

It lets you:
Add new computed fields
Replace existing fields with transformed values
Copy values from one field to another
Flatten arrays or extract specific values

--------------------------------------------------------------

✅ In your case:
$addFields: {
  owner: { $first: "$ownerDetails" }
}

You are:
Taking ownerDetails, which is an array
Extracting the first (and only) user from it
Assigning that object to a new or existing field called owner

----------------------------------------------------------------

🔥 Why is that useful?
Imagine this:
After $lookup, you get:


ownerDetails: [
  {
    fullName: "John",
    username: "john123",
    avatar: "avatar.jpg"
  }
]
This is an array. Not very clean.


----------------------------------------
But after $addFields:

owner: {
  fullName: "John",
  username: "john123",
  avatar: "avatar.jpg"
}

Now you can directly do:  
video.owner.fullName   ✅
video.owner.username   ✅
--------------------------------------
Instead of: 
video.ownerDetails[0].fullName   ❌ (ugly, risky)

***********************************************************

🤔 So what’s the “real role” of $addFields?
| Role                          | Example                                           |
| ----------------------------- | ------------------------------------------------- |
| Add a new field               | `totalViews: "$views"`                            |
| Transform or simplify a field | `owner: { $first: "$ownerDetails" }`              |
| Convert types (optional)      | `views: { $toInt: "$views" }`                     |
| Copy data                     | `copiedTitle: "$title"`                           |
| Merge multiple fields         | `fullName: { $concat: ["$first", " ", "$last"] }` |

----------------------------------------------------------------------

🧠 Key Insight:
$addFields lets you shape your output — so it’s clean, frontend-friendly, and easier to use.

It does something when you're transforming the structure — not just renaming, but flattening, creating, or transforming data.

