We use aggregation in MongoDB to process and transform data
 ‚Äî like joining, filtering, grouping, or calculating ‚Äî in a flexible and powerful way, similar to SQL queries.

‚úÖ aggregation is used when you need to:
 So, aggregation is used when you need to:
Join data from multiple collections ($lookup)

Group data ($group)

Filter and transform data in steps ($match, $project)

Do calculations, counts, averages, etc.
###################################################################################################################

üîπ Common Aggregation Stages (Short List)
Stage              	Purpose
$match	:     Filter documents (like .find())
$lookup	:     It allows you to combine data from two different collections into a single output document
$project:	    Show/hide or reshape fields
$group	:     Group and summarize data
$sort	  :     Sort results
$limit	:     Limit number of documents
$skip	  :     Skip documents (for pagination)
$unwind	:     Split array into separate documents
$addFields :	Add or compute new fields
$count	:     Count number of documents

###################################################################################################################

# from: which document you want to join with
#localField: Field from the current collection
#foreignField: Field from the other collection
#as: Name of the new array field to add

#######################################################################################################

‚ùì Your confusion:
You named your model Subscription, so why does it become lowercase and plural ‚Äî "subscriptions" ‚Äî in the aggregation pipeline?

‚úÖ Quick Answer:
Because $lookup.from works directly on the MongoDB collection name, not on the Mongoose model name.

 Important Rule:
In $lookup, the "from" field must be the exact name of the collection in MongoDB ‚Äî which is automatically lowercase and plural if you didn‚Äôt customize it.
So this: 
            $lookup: {
                from: "subscriptions",  // not "Subscription"
                     ...
                    }
        ‚úÖ is correct ‚Äî because MongoDB sees the actual collection as "subscriptions".


#####################################################################################################################

üß† Why is it pluralized?

When you create a model like this:
mongoose.model("Subscription", subscriptionSchema)

Mongoose creates the MongoDB collection as:
subscriptions   ‚úÖ (lowercase + plural)

#############################################################

üí• If you do it wrong:

If you write:
from: "Subscription" // ‚ùå Wrong!
It will silently fail ‚Äî the $lookup won't return anything, because there is no collection with that name.

##############################################################################################################3

IMPORTANT :

    üî• Key Idea:
There is a difference between:

‚úÖ Mongoose Model Name: What you define in your code.
‚úÖ MongoDB Collection Name: What MongoDB actually stores data in.

üß± Example:

 // Mongoose model (your code)
export const Subscription = mongoose.model("Subscription", subscriptionSchema);

in üü© Here:

1. "Subscription" is the Mongoose model name
2. Mongoose will automatically create a MongoDB collection called:

like this : subscriptions  ‚Üê (lowercase + plural)

######################################################################################################################

üîÅ In Aggregation:
When using $lookup, MongoDB needs to know which collection to join.

So you must give the collection name, like this:

$lookup: {
  from: "subscriptions",   // ‚úÖ this is the real collection in MongoDB
  localField: "user",
  foreignField: "_id",
  as: "userInfo"
}

#########################################################################################3

‚ùå If you write: 
from: "Subscription" // ‚ùå Mongoose model name, not valid here

#It will not work, because MongoDB doesn‚Äôt have a collection literally named "Subscription".

##################################################################333333

UNDERSTANDING CODE:

{
      $lookup: {
          from: "subscriptions",    //which document you want to join with
          localField: "_id",        //Field from the current collection
          foreignField: "channel",  // Match to 'channel' in subscriptions
          as: "subscribers"         //Name of the new array field to add
      } 
    },    
    {
      $lookup: {
         from: "subscriptions",    // Again join with subscriptions
         localField: "_id",        
         foreignField: "subscriber",  // Match to 'subscriber' in subscriptions 
         as: "subscribedTo"
      }
    }

// in this code:
// You're using "subscriptions" twice because you're:
// 1. Reading from the same collection
// 2. But joining on different fields to get different relationships.

#####################################################################################3

 Example 2: Use $match with $lookup
Let‚Äôs say:

1. You do $lookup to join users with orders
2. But you only want users who have orders, or only users from Mumbai
Then use $match after or before $lookup to narrow it down.

üëá Real Pipeline Example :
[
  {
    $match: { city: "Mumbai" }   // filter first
  },
  {
    $lookup: {                   // then join
      from: "orders",
      localField: "_id",
      foreignField: "userId",
      as: "orders"
    }
  }
]


üßæ Summary in One Line

| Operator  | Use When You Want To...                          |
| --------- | ------------------------------------------------ |
| `$match`  | Filter / keep only specific documents            |
| `$lookup` | Join another collection based on matching fields |
